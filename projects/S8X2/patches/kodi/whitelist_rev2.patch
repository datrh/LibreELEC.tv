--- A/xbmc/settings/DisplaySettings.cpp	2020-02-29 11:56:32.000000000 +0100
+++ B/xbmc/settings/DisplaySettings.cpp	2020-03-07 21:43:27.000000000 +0100
@@ -388,6 +388,18 @@
   return false;
 }
 
+void CDisplaySettings::OnSettingChanged(std::shared_ptr<const CSetting> setting)
+{
+  if (!setting)
+    return;
+
+  const std::string& settingId = setting->GetId();
+  if (settingId == CSettings::SETTING_VIDEOSCREEN_WHITELIST)
+  {
+    CResolutionUtils::PrintWhitelist();
+  }
+}
+
 void CDisplaySettings::SetMonitor(std::string monitor)
 {
   const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();

--- A/xbmc/settings/DisplaySettings.h	2020-02-29 11:56:32.000000000 +0100
+++ B/xbmc/settings/DisplaySettings.h	2020-03-07 21:44:40.000000000 +0100
@@ -34,7 +34,8 @@
   void OnSettingAction(std::shared_ptr<const CSetting> setting) override;
   bool OnSettingChanging(std::shared_ptr<const CSetting> setting) override;
   bool OnSettingUpdate(std::shared_ptr<CSetting> setting, const char *oldSettingId, const TiXmlNode *oldSettingNode) override;
-
+  void OnSettingChanged(std::shared_ptr<const CSetting> setting) override;
+  
   /*!
    \brief Returns the currently active resolution
 
--- A/xbmc/windowing/Resolution.cpp	2020-03-06 13:23:40.000000000 +0100
+++ B/xbmc/windowing/Resolution.cpp	2020-03-07 22:09:47.000000000 +0100
@@ -19,6 +19,12 @@
 
 #include <cstdlib>
 
+namespace
+{
+const char* SETTING_VIDEOSCREEN_WHITELIST_PULLDOWN{"videoscreen.whitelistpulldown"};
+const char* SETTING_VIDEOSCREEN_WHITELIST_DOUBLEREFRESHRATE{"videoscreen.whitelistdoublerefreshrate"};
+}
+
 RESOLUTION_INFO::RESOLUTION_INFO(int width, int height, float aspect, const std::string &mode) :
   strMode(mode)
 {
@@ -73,13 +79,13 @@
 void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int height, bool is3D, RESOLUTION &resolution)
 {
   RESOLUTION_INFO curr = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(resolution);
-  CLog::Log(LOGNOTICE, "Whitelist search for: width: %d, height: %d, fps: %0.3f, 3D: %s",
-    width, height, fps, is3D ? "true" : "false");
+  CLog::Log(LOGNOTICE, "[WHITELIST] Searching the whitelist for: width: {}, height: {}, fps: {:0.3f}, 3D: {}", width, height, fps, is3D ? "true" : "false");
 
   std::vector<CVariant> indexList = CServiceBroker::GetSettingsComponent()->GetSettings()->GetList(CSettings::SETTING_VIDEOSCREEN_WHITELIST);
+  
   if (indexList.empty())
   {
-    CLog::Log(LOGDEBUG, "Whitelist is empty using default one");
+    CLog::Log(LOGDEBUG, "[WHITELIST] Using the default whitelist because the user whitelist is empty");
     std::vector<RESOLUTION> candidates;
     RESOLUTION_INFO info;
     std::string resString;
@@ -103,7 +109,7 @@
     }
   }
 
-  CLog::Log(LOGDEBUG, "Trying to find exact refresh rate");
+  CLog::Log(LOGDEBUG, "[WHITELIST] Searching for an exact resolution with an exact refresh rate");
 
   for (const auto& mode : indexList)
   {
@@ -117,64 +123,63 @@
         (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
         MathUtils::FloatEquals(info.fRefreshRate, fps, 0.03f))
     {
-      CLog::Log(LOGDEBUG, "Matched exact whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
+      CLog::Log(LOGDEBUG, "[WHITELIST] Matched an exact resolution with an exact refresh rate {} ({})", info.strMode, i);
       resolution = i;
       return;
     }
   }
 
-  CLog::Log(LOGDEBUG, "No exact whitelisted resolution matched, trying double refresh rate");
+  CLog::Log(LOGDEBUG, "[WHITELIST] No match for an exact resolution with an exact refresh rate");
 
-  for (const auto& mode : indexList)
+  if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(SETTING_VIDEOSCREEN_WHITELIST_DOUBLEREFRESHRATE))
   {
-    auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-    const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+    CLog::Log(LOGDEBUG, "[WHITELIST] Searching for an exact resolution with double the refresh rate");
 
-    // allow resolutions that are exact and have double the refresh rate
-    // allow macroblock alignement / padding errors (e.g. 1080 mod16 == 8)
-    if (((height == info.iScreenHeight && width <= info.iScreenWidth + 8) ||
-         (width == info.iScreenWidth && height <= info.iScreenHeight + 8)) &&
-        (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
-        MathUtils::FloatEquals(info.fRefreshRate, fps * 2, 0.03f))
+    for (const auto& mode : indexList)
     {
-      CLog::Log(LOGDEBUG, "Matched fuzzy whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
-      resolution = i;
-      return;
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+
+      // allow resolutions that are exact and have double the refresh rate
+      // allow macroblock alignement / padding errors (e.g. 1080 mod16 == 8)
+      if (((height == info.iScreenHeight && width <= info.iScreenWidth + 8) ||
+          (width == info.iScreenWidth && height <= info.iScreenHeight + 8)) &&
+          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps * 2, 0.03f))
+      {
+        CLog::Log(LOGDEBUG, "[WHITELIST] Matched an exact resolution with double the refresh rate {} ({})", info.strMode, i);
+        resolution = i;
+        return;
+      }
     }
+  CLog::Log(LOGDEBUG, "[WHITELIST] No match for an exact resolution with double the refresh rate");
   }
 
-  CLog::Log(LOGDEBUG, "No double whitelisted resolution matched, trying 3:2 pullback");
-
-  for (const auto& mode : indexList)
+  if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(SETTING_VIDEOSCREEN_WHITELIST_PULLDOWN))
   {
-    auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-    const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+    CLog::Log(LOGDEBUG, "[WHITELIST] Searching for an exact resolution with a 3:2 pulldown refresh rate");
 
-    // allow resolutions that are exact and have 2.5 times the refresh rate
-    // allow macroblock alignement / padding errors (e.g. 1080 mod16 == 8)
-    if (((height == info.iScreenHeight && width <= info.iScreenWidth + 8) ||
-         (width == info.iScreenWidth && height <= info.iScreenHeight + 8)) &&
-        (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
-        MathUtils::FloatEquals(info.fRefreshRate, fps * 2.5f, 0.01f))
+    for (const auto& mode : indexList)
     {
-      CLog::Log(LOGDEBUG, "Matched fuzzy whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
-      resolution = i;
-      return;
-    }
-  }
-
-  CLog::Log(LOGDEBUG, "No 3:2 pullback refresh rate whitelisted resolution matched, trying current resolution");
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
 
-  if (width <= curr.iScreenWidth
-    && height <= curr.iScreenHeight
-    && (MathUtils::FloatEquals(curr.fRefreshRate, fps, 0.01f)
-      || MathUtils::FloatEquals(curr.fRefreshRate, fps * 2, 0.01f)))
-  {
-    CLog::Log(LOGDEBUG, "Matched current Resolution %s (%d)", curr.strMode.c_str(), resolution);
-    return;
+      // allow resolutions that are exact and have 2.5 times the refresh rate
+      // allow macroblock alignement / padding errors (e.g. 1080 mod16 == 8)
+      if (((height == info.iScreenHeight && width <= info.iScreenWidth + 8) ||
+          (width == info.iScreenWidth && height <= info.iScreenHeight + 8)) &&
+          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps * 2.5f, 0.03f))
+      {
+        CLog::Log(LOGDEBUG, "[WHITELIST] Matched an exact resolution with a 3:2 pulldown refresh rate {} ({})", info.strMode, i);
+        resolution = i;
+        return;
+      }
+    }
+   CLog::Log(LOGDEBUG, "[WHITELIST] No match for a resolution with a 3:2 pulldown refresh rate");
   }
 
-  CLog::Log(LOGDEBUG, "Current resolution doesn't match, trying default resolution");
+  CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a desktop resolution with an exact refresh rate");
 
   const RESOLUTION_INFO desktop_info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(CDisplaySettings::GetInstance().GetCurrentResolution());
 
@@ -188,49 +193,60 @@
         (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
         MathUtils::FloatEquals(info.fRefreshRate, fps, 0.03f))
     {
-      CLog::Log(LOGDEBUG, "Matched fuzzy whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
+      CLog::Log(LOGDEBUG, "[WHITELIST] Matched a desktop resolution with an exact refresh rate {} ({})", info.strMode, i);
       resolution = i;
       return;
     }
   }
 
-  CLog::Log(LOGDEBUG, "Default resolution doesn't provide reqired refreshrate, trying default resolution with double refreshrate");
+  CLog::Log(LOGDEBUG, "[WHITELIST] No match for a desktop resolution with an exact refresh rate");
 
-  for (const auto& mode : indexList)
+  if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(SETTING_VIDEOSCREEN_WHITELIST_DOUBLEREFRESHRATE))
   {
-    auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-    const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+    CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a desktop resolution with double the refresh rate");
 
-    // allow resolutions that are desktop resolution but have double the refresh rate
-    if (info.iScreenWidth == desktop_info.iScreenWidth &&
-        (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
-        MathUtils::FloatEquals(info.fRefreshRate, fps * 2, 0.03f))
+    for (const auto& mode : indexList)
     {
-      CLog::Log(LOGDEBUG, "Matched fuzzy whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
-      resolution = i;
-      return;
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+
+      // allow resolutions that are desktop resolution but have double the refresh rate
+      if (info.iScreenWidth == desktop_info.iScreenWidth &&
+          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps * 2, 0.03f))
+      {
+        CLog::Log(LOGDEBUG, "[WHITELIST] Matched a desktop resolution with double the refresh rate {} ({})", info.strMode, i);
+        resolution = i;
+        return;
+      }
     }
+  CLog::Log(LOGDEBUG, "[WHITELIST] No match for a desktop resolution with double the refresh rate");
   }
 
-  CLog::Log(LOGDEBUG, "Default resolution doesn't provide reqired refreshrate, trying default resolution with 3:2 pullback");
-
-  for (const auto& mode : indexList)
+  if (CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(SETTING_VIDEOSCREEN_WHITELIST_PULLDOWN))
   {
-    auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-    const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+    CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a desktop resolution with a 3:2 pulldown refresh rate");
 
-    // allow resolutions that are desktop resolution but have 2.5 times the refresh rate
-    if (info.iScreenWidth == desktop_info.iScreenWidth &&
-        (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
-        MathUtils::FloatEquals(info.fRefreshRate, fps * 2.5f, 0.01f))
+    for (const auto& mode : indexList)
     {
-      CLog::Log(LOGDEBUG, "Matched fuzzy whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
-      resolution = i;
-      return;
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+
+      // allow resolutions that are desktop resolution but have 2.5 times the refresh rate
+      if (info.iScreenWidth == desktop_info.iScreenWidth &&
+          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps * 2.5f, 0.03f))
+      {
+        CLog::Log(LOGDEBUG, "[WHITELIST] Matched a desktop resolution with a 3:2 pulldown refresh rate {} ({})", info.strMode, i);
+        resolution = i;
+        return;
+      }
     }
+    
+    CLog::Log(LOGDEBUG, "[WHITELIST] No match for a desktop resolution with a 3:2 pulldown refresh rate");
   }
 
-  CLog::Log(LOGDEBUG, "No whitelisted resolution matched");
+  CLog::Log(LOGDEBUG, "[WHITELIST] No resolution matched");
 }
 
 bool CResolutionUtils::FindResolutionFromOverride(float fps, int width, bool is3D, RESOLUTION &resolution, float& weight, bool fallback)
@@ -316,3 +332,21 @@
   std::vector<CVariant> indexList = CServiceBroker::GetSettingsComponent()->GetSettings()->GetList(CSettings::SETTING_VIDEOSCREEN_WHITELIST);
   return !indexList.empty();
 }
+
+
+void CResolutionUtils::PrintWhitelist()
+{
+  std::string modeStr;
+  auto indexList = CServiceBroker::GetSettingsComponent()->GetSettings()->GetList(CSettings::SETTING_VIDEOSCREEN_WHITELIST);
+  if (!indexList.empty())
+  {
+    for (const auto& mode : indexList)
+    {
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+      modeStr.append("\n" + info.strMode);
+    }
+
+    CLog::Log(LOGDEBUG, "[WHITELIST] whitelisted modes:{}", modeStr);
+  }
+}
\ No newline at end of file

--- A/xbmc/windowing/Resolution.h	2020-02-29 11:56:32.000000000 +0100
+++ B/xbmc/windowing/Resolution.h	2020-03-07 22:10:36.000000000 +0100
@@ -68,6 +68,7 @@
 public:
   static RESOLUTION ChooseBestResolution(float fps, int width, int height, bool is3D);
   static bool HasWhitelist();
+  static void PrintWhitelist();
 protected:
   static void FindResolutionFromWhitelist(float fps, int width, int height, bool is3D, RESOLUTION &resolution);
   static bool FindResolutionFromOverride(float fps, int width, bool is3D, RESOLUTION &resolution, float& weight, bool fallback);

--- A/xbmc/settings/Settings.cpp	2020-02-29 11:56:32.000000000 +0100
+++ B/xbmc/settings/Settings.cpp	2020-03-07 21:45:52.000000000 +0100
@@ -846,6 +846,7 @@
   settingSet.insert(CSettings::SETTING_VIDEOSCREEN_3DLUT);
   settingSet.insert(CSettings::SETTING_VIDEOSCREEN_DISPLAYPROFILE);
   settingSet.insert(CSettings::SETTING_VIDEOSCREEN_BLANKDISPLAYS);
+  settingSet.insert(CSettings::SETTING_VIDEOSCREEN_WHITELIST);
   GetSettingsManager()->RegisterCallback(&CDisplaySettings::GetInstance(), settingSet);
 
   settingSet.clear();

--- A/system/settings/settings.xml	2020-03-06 13:23:40.000000000 +0100
+++ B/system/settings/settings.xml	2020-03-07 21:40:44.000000000 +0100
@@ -2111,18 +2111,6 @@
           </dependencies>
           <control type="spinner" format="string" delayed="true" />
         </setting>
-        <setting id="videoscreen.whitelist" type="list[string]" parent="videoscreen.screen" label="14085" help="36356">
-          <level>3</level>
-          <constraints>
-            <options>modes</options>
-            <default></default>
-            <delimiter>,</delimiter>
-            <minimumitems>0</minimumitems>
-          </constraints>
-          <control type="list" format="string">
-            <multiselect>true</multiselect>
-          </control>
-        </setting>
         <setting id="videoscreen.resolution" type="integer" parent="videoscreen.screen" label="169" help="36352">
           <level>0</level>
           <default>16</default> <!-- RES_DESKTOP -->
@@ -2383,7 +2371,37 @@
           <control type="spinner" format="integer" />
         </setting>
       </group>
-      <group id="2" label="14232">
+      <group id="2" label="14126">
+        <setting id="videoscreen.whitelist" type="list[string]" parent="videoscreen.screen" label="14126" help="36443">
+          <level>3</level>
+          <constraints>
+            <options>modes</options>
+            <default></default>
+            <delimiter>,</delimiter>
+            <minimumitems>0</minimumitems>
+          </constraints>
+          <control type="list" format="string">
+            <multiselect>true</multiselect>
+          </control>
+        </setting>
+        <setting id="videoscreen.whitelistpulldown" type="boolean" parent="videoscreen.whitelist" label="14127" help="36444">
+          <level>3</level>
+          <default>false</default>
+          <dependencies>
+            <dependency type="enable" setting="videoscreen.whitelist" operator="!is"></dependency>
+          </dependencies>
+          <control type="toggle" />
+        </setting>
+        <setting id="videoscreen.whitelistdoublerefreshrate" type="boolean" parent="videoscreen.whitelist" label="14128" help="36445">
+          <level>3</level>
+          <default>false</default>
+          <dependencies>
+            <dependency type="enable" setting="videoscreen.whitelist" operator="!is"></dependency>
+          </dependencies>
+          <control type="toggle" />
+        </setting>
+      </group>
+      <group id="3" label="14232">
         <setting id="videoscreen.stereoscopicmode" type="integer" label="36500" help="36539">
           <level>2</level>
           <default>0</default>
@@ -2404,7 +2422,7 @@
           <control type="list" format="integer"/>
         </setting>
       </group>
-      <group id="3" label="496">
+      <group id="4" label="496">
         <setting id="videoscreen.noofbuffers" type="integer" label="36043" help="36552">
           <level>2</level>
           <default>3</default> <!-- triple buffers -->

--- A/addons/resource.language.en_gb/resources/strings.po	2020-03-06 13:23:39.000000000 +0100
+++ B/addons/resource.language.en_gb/resources/strings.po	2020-03-07 21:37:37.000000000 +0100
@@ -7867,10 +7867,7 @@
 msgid "Queue songs on selection"
 msgstr ""
 
-#: system/settings/settings.xml
-msgctxt "#14085"
-msgid "Whitelist"
-msgstr ""
+#empty string with id 14085
 
 #: system/settings/settings.xml
 msgctxt "#14086"
@@ -8087,7 +8084,22 @@
 msgid "Input"
 msgstr ""
 
-#empty strings from id 14126 to 14199
+#: system/settings/settings.xml
+msgctxt "#14126"
+msgid "Whitelist"
+msgstr ""
+
+#: system/settings/settings.xml
+msgctxt "#14127"
+msgid "Allow 3:2 pulldown refresh rates"
+msgstr ""
+
+#: system/settings/settings.xml
+msgctxt "#14128"
+msgid "Allow double refresh rates"
+msgstr ""
+
+#empty strings from id 14129 to 14199
 
 #: system/settings/settings.xml
 msgctxt "#14200"
@@ -19366,11 +19378,7 @@
 msgid "In a multi-screen configuration, the screens not displaying this application are blacked out."
 msgstr ""
 
-#. Description of setting with label #14085 "Whitelist"
-#: system/settings/settings.xml
-msgctxt "#36356"
-msgid "Whitelisted modes are allowed to be switched to when changing resolution and refresh rate"
-msgstr ""
+#empty string with id 36356
 
 #. Description of setting with label #214 "Video calibration..."
 #: system/settings/settings.xml
@@ -19839,7 +19847,25 @@
 msgid "Set the number of volume control steps."
 msgstr ""
 
-#empty strings from id 36443 to 36459
+#. Description of setting with label #14126 "Whitelist"
+#: system/settings/settings.xml
+msgctxt "#36443"
+msgid "Whitelisted modes give the user the control to choose which display modes are allowed or not allowed to be used"
+msgstr ""
+
+#. Description of setting with label #14127 "Whitelist"
+#: system/settings/settings.xml
+msgctxt "#36444"
+msgid "Select this option to allow using 3:2 pulldown refresh rates (playing 23.976 FPS video on a 59.94 Hz monitor or playing 24 FPS video on a 60 Hz monitor). You may want to use this option if your monitor doesn't have a 23.976 Hz or 24 Hz mode."
+msgstr ""
+
+#. Description of setting with label #14128 "Whitelist"
+#: system/settings/settings.xml
+msgctxt "#36445"
+msgid "Select this option to allow using double refresh rates (playing 29.97 FPS video on a 59.94 Hz monitor or playing 30 FPS video on a 60 Hz monitor). You may want to use this option if your monitor doesn't have a 29.97 Hz or 30 Hz mode."
+msgstr ""
+
+#empty strings from id 36446 to 36459
 
 #. Description of settings with label #14112 "Enable event logging"
 #: system/settings/settings.xml

--- A/xbmc/windowing/WinSystem.cpp	2020-02-29 11:56:32.000000000 +0100
+++ B/xbmc/windowing/WinSystem.cpp	2020-03-07 22:11:43.000000000 +0100
@@ -30,6 +30,9 @@
 {
   UpdateResolutions();
   CDisplaySettings::GetInstance().ApplyCalibrations();
+  
+  CResolutionUtils::PrintWhitelist();
+  
   return true;
 }
 
